
# Logging

snippet ulog "UE_LOG with all log levels" b
UE_LOG(Log${1:Category}, ${2:VeryVerbose,Verbose,Log,Warning,Display,Error,Fatal}, TEXT("${3:Message}"), ${4:...});$0
endsnippet

snippet clog "UE_CLOG with all log levels" b
UE_CLOG(${1:Condition}, Log${2:Category}, ${3:VeryVerbose,Verbose,Log,Warning,Display,Error,Fatal}, TEXT("${4:Message}"), ${5:...});$0
endsnippet

snippet veryverbose "Very Verbose log" b
UE_LOG(Log${1:Category}, VeryVerbose, TEXT("${2:Message}"), ${3:...});$0
endsnippet

snippet verbose "Verbose log" b
UE_LOG(Log${1:Category}, Verbose, TEXT("${2:Message}"), ${3:...});$0
endsnippet

snippet log "Standard log" b
UE_LOG(Log${1:Category}, Log, TEXT("${2:Message}"), ${3:...});$0
endsnippet

snippet warning "Warning log" b
UE_LOG(Log${1:Category}, Warning, TEXT("${2:Message}"), ${3:...});$0
endsnippet

snippet error "Error log" b
UE_LOG(Log${1:Category}, Error, TEXT("${2:Message}"), ${3:...});$0
endsnippet

snippet logcat "Define a static log category." b
DEFINE_LOG_CATEGORY_STATIC(Log${1:Category}, Log, All);$0
endsnippet

snippet logcatdec "Declare a global log category." b
DECLARE_LOG_CATEGORY_EXTERN(Log${1:Category}, Log, All);$0
endsnippet

snippet logcatdef "Define a global log category." b
DEFINE_LOG_CATEGORY(Log$1);$0
endsnippet

snippet logactive "Determine if log category is active." w
UE_LOG_ACTIVE(Log${1:Category}, ${2:Verbose})
endsnippet

# Classes

snippet header "Standard header file preamble." b
#pragma once

#include "CoreMinimal.h"

#include "`!v expand('%:t:r')`.generated.h"

$0
endsnippet

snippet actor "Declare an AActor subclass." b
UCLASS()
class A${1:MyActor} : public A${2:Actor}
{
	GENERATED_BODY()

public:

	A$1();

	$0
};
endsnippet

snippet uobject "Declare a UObject subclass." b
UCLASS()
class U${1:MyObject} : public U${2:Object}
{
	GENERATED_BODY()

public:

	U$1();

	$0
};
endsnippet

snippet ustruct "Declare a USTRUCT" b
USTRUCT(${2:BlueprintType})
struct F${1:MyStruct}
{
	GENERATED_BODY()

	F$1() {}

	$0
};
endsnippet

snippet uinterface "Declare a UINTERFACE" b
UINTERFACE(${2:BlueprintType})
class U${1:MyInterface} : public UInterface
{
	GENERATED_BODY()
};

class I$1
{
	GENERATED_BODY()

public:
	virtual void Foo();
};
endsnippet

snippet uprop "Declare a UPROPERTY" b
UPROPERTY(${3:EditDefaultsOnly,BlueprintReadOnly,Replicated,Transient})
${1:type} ${2:MyVar};$0
endsnippet

snippet ufunc "Declare a UFUNCTION" b
UFUNCTION(${4:BlueprintPure,BlueprintImplementableEvent,BlueprintNativeEvent})
${1:type} ${2:MyFunc}(${3:args});
endsnippet

snippet replicatedusing "Declare a UPROPERTY replicated with a function" b
UPROPERTY(ReplicatedUsing = OnRep_$2)
${1:type} ${2:MyVar};

UFUNCTION()
void OnRep_$2();$0
endsnippet

snippet cds "Create Default Subobject"
CreateDefaultSubobject<U${1:SceneComponent}>(TEXT("${2:My$1}"));$0
endsnippet

# Delegates and Multicast Delegates

snippet del "No parameter delegate" b
DECLARE_${1:MULTICAST_}DELEGATE(F${2:MyDelegateName});$0
endsnippet

snippet del1 "1 param delegate" b
DECLARE_${1:MULTICAST_}DELEGATE_OneParam(F${2:MyDelegateName}, ${3:Type});$0
endsnippet

snippet del2 "2 param delegate" b
DECLARE_${1:MULTICAST_}DELEGATE_TwoParams(F${2:MyDelegateName}, ${3:Type}, ${4:Type});$0
endsnippet

snippet del3 "3 param delegate" b
DECLARE_${1:MULTICAST_}DELEGATE_ThreeParams(F${2:MyDelegateName}, ${3:Type}, ${4:Type}, ${5:Type});$0
endsnippet

snippet del4 "4 param delegate" b
DECLARE_${1:MULTICAST_}DELEGATE_FourParams(F${2:MyDelegateName}, ${3:Type}, ${4:Type}, ${5:Type}, ${6:Type});$0
endsnippet

# Dynamic Multicast Delegates

snippet ddel "No parameter dynamic multicast delegate" b
DECLARE_DYNAMIC_MULTICAST_DELEGATE(F${1:MyDelegateName});$0
endsnippet

snippet ddel1 "1 param dynamic multicast delegate" b
DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F${1:MyDelegateName}, ${2:Type}, ${3:Name});$0
endsnippet

snippet ddel2 "2 param dynamic multicast delegate" b
DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(F${1:MyDelegateName}, ${2:Type}, ${3:Name}, ${4:Type}, ${5:Name});$0
endsnippet

snippet ddel3 "3 param dynamic multicast delegate" b
DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(F${1:MyDelegateName}, ${2:Type}, ${3:Name}, ${4:Type}, ${5:Name}, ${6:Type}, ${7:Name});$0
endsnippet

snippet ddel4 "4 param dynamic multicast delegate" b
DECLARE_DYNAMIC_MULTICAST_DELEGATE_FourParams(F${1:MyDelegateName}, ${2:Type}, ${3:Name}, ${4:Type}, ${5:Name}, ${6:Type}, ${7:Name}, ${8:Type}, ${9:Name});$0
endsnippet

# Variables

snippet cvar "console variable" b
static TAutoConsoleVariable<${1:int32,float,FString,bool}> CVar${2:MyVar}(TEXT("$2"), 0, TEXT("${3:Help text}"));$0
endsnippet

# Iterators

snippet actoriterator "TActorIterator for loop." b
for (TActorIterator<A${1:Actor}> ${2:It}(GetWorld()); $2; ++$2)
{
	A$1* ${3:$1} = *$2;
	$0
}
endsnippet

# Casting

snippet cast "Cast UObject and declare variable with same type." w
${1:UMyObj}* ${2:ToVar} = Cast<$1>(${3:FromVar})
endsnippet

# modeline configured to mimic Visual Studio, where the majority of UE4 development occurs.
# vim: noet ts=4 sw=4
